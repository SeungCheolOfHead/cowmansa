<var, let, const의 차이>
var, let은 변수를 선언하는 키워드
const는 상수를 선언하는 키워드

const는 리터럴 값 재할당 불가능
따라서 선언과 동시에 리터럴 값 할당

let a='test';
let a='test2'; ==>>> 이와 같은 설정은 불가능
a='test3'; ===>> 이것은 가능

const b='test';
const b='test2' ====>> 식별자 에러남
b='test3'

<express 코드를 사용하는 이유(미들웨어)>
const express = require('express'); //express 인스턴스를 어플리케이션이라고 함.
const app = express();  //여기서 app을 어플리케이션이라고 합니다.
//미들웨어를 app에 추가, 라우팅설정, 서버를 요청 대기 상태로

app.listen(3000, function(){
    console.log('server is running');
})
//위의 코드는 지정된 포트를 사용해서 서버를 리슨시키고 대기상태로 만든다.

로깅 미들웨어==>use(middleware)를 사용하여 추가

nodejs는 모듈시스템으로 윈도우 전역객체를 사용하거나 의존성 로더 사용

ex) const http = require('http'); //http 모듈을 가지고 와서 함수 사용 가능

//모듈파일 불러와 사용하기
const math = require('./math.js')
const result = math.sum(1, 1);      //math 모듈을 불러와서 값을 사용가능
console.log(result);   //2

//동기적인 코드 작성
const fs =  require('fs');      //파일 시스템에 대한 모듈을 받아옴
const data = fs.readFileSync('./data.txt', 'utf-8');    //fs의 모듈을 사용하여 동기적으로 파일을 읽는다.
console.log(data);

readFile의 경우 비동기적으로 파일을 읽고 콜백 함수 스타일로 적용

const fs =  require('fs');    //파일 시스템에 대한 모듈을 받아옴
console.log('before');        //콘솔로그로 이름을 보여줌

const data = fs.readFile('./data.txt', 'utf-8', function(err, data){
  console.log(data);
});
//위의 3줄의 코드는 비동기적으로 data.txt 파일을 읽어서 보여주는 방식

console.log('after');         //콘솔로그로 이름을 보여줌

GET : 자원을 조회
POST : 자원을 생성
PUT : 자원을 갱신, 정보를 수정할 때.
DELETE : 자원을 삭제

HTTP요청에서 모든 자원은 명사로 시별하고 HTTL 경로로 자원을 요청한다
GET/users, GET/users{id} 등과 같이 요청할 수 있다.

app.get('/users', function (req, res) {
    //req, res http를 한번 wrapping한 객체
  res.send('user list!');
});

app.post('/users', function(){
    //create user
    res.send(User);
})

Application
app 객체의 메소드로는 다음과 같은 것이 있다.
1. http 요청 라우팅 -> app.METHOD(ex. app.post, app.get, ...)
2. 미들웨어 설정 -> app.route
3. HTML 뷰 렌더링 -> app.render
4. 템플릿 엔진 등록 -> app.engine
(그리고 app.use)

js 파일의 경우 서버의 설정을 담은 파일이고, package.json은 어떤 모듈에 의존하는지 정리한 파일
그리고 ejs의 경우 views의 서버가 렌더링하는 템플릿들을 저장할 수 있다.

function(req, res){
  res.render('index', { title: 'Express' });
});

req 객체의 경우 클라이언트의 request 정보가 담겨있음
res 객체의 경우 서버가 클라이언트에게 response할 정보가 담겨있음


--------------------------------------간단한코드예제------------------------------
// Express 모듈 가져오기
const express = require('express');

// Express 애플리케이션 생성
const app = express();

// 미들웨어 설정
app.use(express.json()); // JSON 요청 처리를 위한 미들웨어

// 라우트 설정
app.get('/', (req, res) => {
  res.send('안녕하세요, Node.js 서버입니다!');
});

app.post('/users', (req, res) => {
  const { name, email } = req.body;
  // 요청 데이터에서 name과 email 추출

  // 새로운 사용자 생성 및 데이터베이스에 저장하는 등의 로직 수행

  res.send('사용자가 생성되었습니다!');
});

// 서버 시작
app.listen(3000, () => {
  console.log('서버가 3000번 포트에서 실행 중입니다.');
});
---------------------------------------------------------------------------------

connection.query(sql, values, callback)
컨넥션 쿼리에 대한 기본적인 함수형식은 이렇게 구성됨.

sql: SQL 쿼리문 또는 프리페어드 스테이트먼트(prepared statement) 문자열입니다.
values: SQL 쿼리문 또는 프리페어드 스테이트먼트에 사용될 (매개변수 값의 배열)입니다.
callback: 쿼리 실행이 완료된 후 호출되는 (콜백 함수)입니다.
콜백 함수는 두 개의 매개변수 (err과 result)를 받습니다.

---------------------------------------------------------------------------------
var ipfilter = require('express-ipfilter').IpFilter;
var IpDeniedError = require('express-ipfilter').IpDeniedError;
var ips = ['172.16.17.33'];
app.use(ipfilter(ips));

app.use(function(err, req, res, _next) {
    //console.log('Error handler', err);
    res.send('Access Denied');                     // page view 'Access Denied'
    if(err instanceof IpDeniedError){
      res.status(401).end();
    }else{
      res.status(err.status || 500).end();
    }
});
아이피 차단용 구문
---------------------------------------------------------------------------------

connection.query(queryString, values, callback)
컨넥션 쿼리문에 대해서는 다음 3가지의 값으로 구분되어있다.
- queryString: 실행할 SQL 쿼리를 나타내는 문자열.
이 부분에는 INSERT, SELECT, UPDATE, DELETE 등 다양한 종류의 SQL 쿼리를 작성.
쿼리에는 테이블 이름, 조건절, 업데이트할 열 및 값을 포함.
쿼리 문자열 안에서 플레이스홀더(?)를 사용하여 동적으로 값을 바인딩.

- values (선택 사항): 쿼리 문자열에 있는 플레이스홀더에 바인딩할 값을 배열 형태로 전달.
이 배열의 값은 쿼리 문자열에 있는 플레이스홀더의 순서에 따라 대응.

- callback: 쿼리 실행이 완료된 후 호출될 콜백 함수.
콜백 함수는 err와 results 매개변수를 가지며, 쿼리 실행 중 발생한 오류 또는 쿼리 실행 결과를 전달.
오류가 발생하지 않으면 err 매개변수는 null.
results는 쿼리 실행 결과로서, SELECT 쿼리의 경우 검색된 행의 배열을 반환하고,
INSERT, UPDATE, DELETE 쿼리의 경우는 영향을 받은 행의 수를 반환.

※ 쿼리 실행이 완료되면 콜백 함수가 호출되어 결과를 처리하거나 오류를 처리
---------------------------------------------------------------------------------




























.
